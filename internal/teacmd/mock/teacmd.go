// Code generated by MockGen. DO NOT EDIT.
// Source: internal/teacmd/teacmd.go
//
// Generated by this command:
//
//	mockgen -source internal/teacmd/teacmd.go -destination internal/teacmd/mock/teacmd.go
//

// Package mock_teacmd is a generated GoMock package.
package mock_teacmd

import (
	reflect "reflect"

	tea "github.com/charmbracelet/bubbletea"
	gomock "go.uber.org/mock/gomock"
	config "pkg.world.dev/world-cli/config"
	teacmd "pkg.world.dev/world-cli/internal/teacmd"
	dependency "pkg.world.dev/world-cli/utils/dependency"
)

// MockTeaCmd is a mock of TeaCmd interface.
type MockTeaCmd struct {
	ctrl     *gomock.Controller
	recorder *MockTeaCmdMockRecorder
}

// MockTeaCmdMockRecorder is the mock recorder for MockTeaCmd.
type MockTeaCmdMockRecorder struct {
	mock *MockTeaCmd
}

// NewMockTeaCmd creates a new mock instance.
func NewMockTeaCmd(ctrl *gomock.Controller) *MockTeaCmd {
	mock := &MockTeaCmd{ctrl: ctrl}
	mock.recorder = &MockTeaCmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeaCmd) EXPECT() *MockTeaCmdMockRecorder {
	return m.recorder
}

// CheckDependenciesCmd mocks base method.
func (m *MockTeaCmd) CheckDependenciesCmd(deps []dependency.Dependency) tea.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDependenciesCmd", deps)
	ret0, _ := ret[0].(tea.Cmd)
	return ret0
}

// CheckDependenciesCmd indicates an expected call of CheckDependenciesCmd.
func (mr *MockTeaCmdMockRecorder) CheckDependenciesCmd(deps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDependenciesCmd", reflect.TypeOf((*MockTeaCmd)(nil).CheckDependenciesCmd), deps)
}

// DockerPurge mocks base method.
func (m *MockTeaCmd) DockerPurge() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerPurge")
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerPurge indicates an expected call of DockerPurge.
func (mr *MockTeaCmdMockRecorder) DockerPurge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerPurge", reflect.TypeOf((*MockTeaCmd)(nil).DockerPurge))
}

// DockerRestart mocks base method.
func (m *MockTeaCmd) DockerRestart(cfg config.Config, services []teacmd.DockerService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerRestart", cfg, services)
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerRestart indicates an expected call of DockerRestart.
func (mr *MockTeaCmdMockRecorder) DockerRestart(cfg, services any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerRestart", reflect.TypeOf((*MockTeaCmd)(nil).DockerRestart), cfg, services)
}

// DockerStart mocks base method.
func (m *MockTeaCmd) DockerStart(cfg config.Config, services []teacmd.DockerService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerStart", cfg, services)
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerStart indicates an expected call of DockerStart.
func (mr *MockTeaCmdMockRecorder) DockerStart(cfg, services any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerStart", reflect.TypeOf((*MockTeaCmd)(nil).DockerStart), cfg, services)
}

// DockerStartAll mocks base method.
func (m *MockTeaCmd) DockerStartAll(cfg config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerStartAll", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerStartAll indicates an expected call of DockerStartAll.
func (mr *MockTeaCmdMockRecorder) DockerStartAll(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerStartAll", reflect.TypeOf((*MockTeaCmd)(nil).DockerStartAll), cfg)
}

// DockerStop mocks base method.
func (m *MockTeaCmd) DockerStop(services []teacmd.DockerService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerStop", services)
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerStop indicates an expected call of DockerStop.
func (mr *MockTeaCmdMockRecorder) DockerStop(services any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerStop", reflect.TypeOf((*MockTeaCmd)(nil).DockerStop), services)
}

// DockerStopAll mocks base method.
func (m *MockTeaCmd) DockerStopAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerStopAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DockerStopAll indicates an expected call of DockerStopAll.
func (mr *MockTeaCmdMockRecorder) DockerStopAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerStopAll", reflect.TypeOf((*MockTeaCmd)(nil).DockerStopAll))
}

// GitCloneCmd mocks base method.
func (m *MockTeaCmd) GitCloneCmd(url, targetDir, initMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitCloneCmd", url, targetDir, initMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// GitCloneCmd indicates an expected call of GitCloneCmd.
func (mr *MockTeaCmdMockRecorder) GitCloneCmd(url, targetDir, initMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitCloneCmd", reflect.TypeOf((*MockTeaCmd)(nil).GitCloneCmd), url, targetDir, initMsg)
}

// PrettyPrintMissingDependency mocks base method.
func (m *MockTeaCmd) PrettyPrintMissingDependency(depStatus []teacmd.DependencyStatus) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrettyPrintMissingDependency", depStatus)
	ret0, _ := ret[0].(string)
	return ret0
}

// PrettyPrintMissingDependency indicates an expected call of PrettyPrintMissingDependency.
func (mr *MockTeaCmdMockRecorder) PrettyPrintMissingDependency(depStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrettyPrintMissingDependency", reflect.TypeOf((*MockTeaCmd)(nil).PrettyPrintMissingDependency), depStatus)
}

// PrintDependencyStatus mocks base method.
func (m *MockTeaCmd) PrintDependencyStatus(depStatus []teacmd.DependencyStatus) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintDependencyStatus", depStatus)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// PrintDependencyStatus indicates an expected call of PrintDependencyStatus.
func (mr *MockTeaCmdMockRecorder) PrintDependencyStatus(depStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintDependencyStatus", reflect.TypeOf((*MockTeaCmd)(nil).PrintDependencyStatus), depStatus)
}
