// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/world/evm/evm.go
//
// Generated by this command:
//
//	mockgen -source cmd/world/evm/evm.go -destination cmd/world/evm/mock/evm.go
//

// Package mock_evm is a generated GoMock package.
package mock_evm

import (
	reflect "reflect"

	cobra "github.com/spf13/cobra"
	gomock "go.uber.org/mock/gomock"
)

// MockEVM is a mock of EVM interface.
type MockEVM struct {
	ctrl     *gomock.Controller
	recorder *MockEVMMockRecorder
}

// MockEVMMockRecorder is the mock recorder for MockEVM.
type MockEVMMockRecorder struct {
	mock *MockEVM
}

// NewMockEVM creates a new mock instance.
func NewMockEVM(ctrl *gomock.Controller) *MockEVM {
	mock := &MockEVM{ctrl: ctrl}
	mock.recorder = &MockEVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEVM) EXPECT() *MockEVMMockRecorder {
	return m.recorder
}

// GetBaseCmd mocks base method.
func (m *MockEVM) GetBaseCmd() *cobra.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseCmd")
	ret0, _ := ret[0].(*cobra.Command)
	return ret0
}

// GetBaseCmd indicates an expected call of GetBaseCmd.
func (mr *MockEVMMockRecorder) GetBaseCmd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseCmd", reflect.TypeOf((*MockEVM)(nil).GetBaseCmd))
}
