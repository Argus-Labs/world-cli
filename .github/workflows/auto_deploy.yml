name: Auto Deploy Preview

on:
  workflow_call:
    inputs:
      base:
        type: string
        required: true
      head:
        type: string
        required: true

permissions:
  contents: write
  statuses: read

jobs:
  signal:
    runs-on: ubuntu-latest
    steps:
      - name: Emit repository_dispatch to App
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: "auto-deploy",
              client_payload: {
                base: ${{ toJson(inputs.base) }},
                head: ${{ toJson(inputs.head) }}
              }
            })

      - name: Wait for World Forge status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const ref = ${{ toJson(inputs.head) }};
            const prefix = "world-forge/auto-deploy";
            const initDeadline = Date.now() + 2*60*1000;
            const hardDeadline = Date.now() + 45*60*1000;
            const sleep = (ms) => new Promise(r => setTimeout(r, ms));

            async function allStatuses() {
              const { data } = await github.rest.repos.getCombinedStatusForRef({ owner, repo, ref });
              return data.statuses || [];
            }

            // Track last reported terminal state per project to avoid duplicate logs
            const lastReportedBySlug = {};

            let expected = null;
            while (Date.now() < initDeadline) {
              const statuses = await allStatuses();
              const aggFail = statuses.find(s => s.context === prefix && (s.state === "failure" || s.state === "error"));
              if (aggFail) { core.setFailed(aggFail.description || "Auto-deploy aggregate failed"); return; }
              const aggs = statuses.filter(s => s.context === prefix && s.state === "pending");
              for (const a of aggs) {
                const n = parseInt(a.description || "0", 10);
                if (!Number.isNaN(n) && n > 0) { expected = n; break; }
              }
              if (expected) { core.info(`${expected} deploy${expected===1?'':'s'} are in progress`); break; }
              await sleep(5000);
            }
            if (!expected) { core.setFailed("Auto-deploy did not publish expected deployment count."); return; }

            let prevCompleted = -1, prevSuccess = -1, prevFailed = -1;
            while (Date.now() < hardDeadline) {
              const statuses = await allStatuses();
              const perProject = statuses.filter(s => s.context && s.context.startsWith(prefix + "/"));

              // Build latest status per project slug (use updated_at/created_at to pick most recent)
              const latestBySlug = {};
              for (const s of perProject) {
                const slug = s.context.slice(prefix.length + 1);
                const time = new Date(s.updated_at || s.created_at || 0).getTime();
                const prev = latestBySlug[slug];
                if (!prev || time > prev._time) {
                  latestBySlug[slug] = { ...s, _time: time, _slug: slug };
                }
              }

              const latestList = Object.values(latestBySlug);
              const success = latestList.filter(s => s.state === "success").length;
              const failed  = latestList.filter(s => s.state === "failure" || s.state === "error").length;
              const completed = success + failed;

              if (completed !== prevCompleted || success !== prevSuccess || failed !== prevFailed) {
                core.info(`completed=${completed}/${expected} success=${success} failed=${failed}`);
                prevCompleted = completed; prevSuccess = success; prevFailed = failed;
              }

              // Emit per-project updates when terminal state changes
              for (const s of latestList) {
                const slug = s._slug;
                const state = s.state;
                const prev = lastReportedBySlug[slug];
                if ((state === "failure" || state === "error") && prev !== state) {
                  const reason = s.description || "No details provided.";
                  core.info(`❌Project ${slug} failed: ${reason}`);
                  core.info(" ");
                  lastReportedBySlug[slug] = state;
                } else if (state === "success" && prev !== state) {
                  core.info(`✅Project ${slug} passed!`);
                  core.info(" ");
                  lastReportedBySlug[slug] = state;
                }
              }

              if (completed >= expected) { if (failed > 0) core.setFailed(`Deploy failures: ${failed}/${expected}`); return; }
              await sleep(10000);
            }
            core.setFailed("Timed out waiting for auto-deploy results.");
