// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: logs/v1/logs.proto

package logsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "pkg.world.dev/world-cli/gen/logs/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LogsServiceName is the fully-qualified name of the LogsService service.
	LogsServiceName = "logs.v1.LogsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LogsServiceGetLogsProcedure is the fully-qualified name of the LogsService's GetLogs RPC.
	LogsServiceGetLogsProcedure = "/logs.v1.LogsService/GetLogs"
)

// LogsServiceClient is a client for the logs.v1.LogsService service.
type LogsServiceClient interface {
	GetLogs(context.Context, *connect.Request[v1.GetLogsRequest]) (*connect.ServerStreamForClient[v1.GetLogsResponse], error)
}

// NewLogsServiceClient constructs a client for the logs.v1.LogsService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLogsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LogsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	logsServiceMethods := v1.File_logs_v1_logs_proto.Services().ByName("LogsService").Methods()
	return &logsServiceClient{
		getLogs: connect.NewClient[v1.GetLogsRequest, v1.GetLogsResponse](
			httpClient,
			baseURL+LogsServiceGetLogsProcedure,
			connect.WithSchema(logsServiceMethods.ByName("GetLogs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// logsServiceClient implements LogsServiceClient.
type logsServiceClient struct {
	getLogs *connect.Client[v1.GetLogsRequest, v1.GetLogsResponse]
}

// GetLogs calls logs.v1.LogsService.GetLogs.
func (c *logsServiceClient) GetLogs(ctx context.Context, req *connect.Request[v1.GetLogsRequest]) (*connect.ServerStreamForClient[v1.GetLogsResponse], error) {
	return c.getLogs.CallServerStream(ctx, req)
}

// LogsServiceHandler is an implementation of the logs.v1.LogsService service.
type LogsServiceHandler interface {
	GetLogs(context.Context, *connect.Request[v1.GetLogsRequest], *connect.ServerStream[v1.GetLogsResponse]) error
}

// NewLogsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLogsServiceHandler(svc LogsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	logsServiceMethods := v1.File_logs_v1_logs_proto.Services().ByName("LogsService").Methods()
	logsServiceGetLogsHandler := connect.NewServerStreamHandler(
		LogsServiceGetLogsProcedure,
		svc.GetLogs,
		connect.WithSchema(logsServiceMethods.ByName("GetLogs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/logs.v1.LogsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LogsServiceGetLogsProcedure:
			logsServiceGetLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLogsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLogsServiceHandler struct{}

func (UnimplementedLogsServiceHandler) GetLogs(context.Context, *connect.Request[v1.GetLogsRequest], *connect.ServerStream[v1.GetLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("logs.v1.LogsService.GetLogs is not implemented"))
}
