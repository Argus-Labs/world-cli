// Code generated by MockGen. DO NOT EDIT.
// Source: utils/terminal/terminal.go
//
// Generated by this command:
//
//	mockgen -source utils/terminal/terminal.go -destination utils/terminal/mock/terminal.go
//

// Package mock_terminal is a generated GoMock package.
package mock_terminal

import (
	exec "os/exec"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTerminal is a mock of Terminal interface.
type MockTerminal struct {
	ctrl     *gomock.Controller
	recorder *MockTerminalMockRecorder
}

// MockTerminalMockRecorder is the mock recorder for MockTerminal.
type MockTerminalMockRecorder struct {
	mock *MockTerminal
}

// NewMockTerminal creates a new mock instance.
func NewMockTerminal(ctrl *gomock.Controller) *MockTerminal {
	mock := &MockTerminal{ctrl: ctrl}
	mock.recorder = &MockTerminalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerminal) EXPECT() *MockTerminalMockRecorder {
	return m.recorder
}

// Chdir mocks base method.
func (m *MockTerminal) Chdir(dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chdir", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chdir indicates an expected call of Chdir.
func (mr *MockTerminalMockRecorder) Chdir(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chdir", reflect.TypeOf((*MockTerminal)(nil).Chdir), dir)
}

// Exec mocks base method.
func (m *MockTerminal) Exec(name string, args ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTerminalMockRecorder) Exec(name any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTerminal)(nil).Exec), varargs...)
}

// ExecCmd mocks base method.
func (m *MockTerminal) ExecCmd(cmd *exec.Cmd) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCmd", cmd)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCmd indicates an expected call of ExecCmd.
func (mr *MockTerminalMockRecorder) ExecCmd(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCmd", reflect.TypeOf((*MockTerminal)(nil).ExecCmd), cmd)
}

// GetWd mocks base method.
func (m *MockTerminal) GetWd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWd indicates an expected call of GetWd.
func (mr *MockTerminalMockRecorder) GetWd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWd", reflect.TypeOf((*MockTerminal)(nil).GetWd))
}

// Rm mocks base method.
func (m *MockTerminal) Rm(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rm", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rm indicates an expected call of Rm.
func (mr *MockTerminalMockRecorder) Rm(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rm", reflect.TypeOf((*MockTerminal)(nil).Rm), path)
}

// Wait mocks base method.
func (m *MockTerminal) Wait(cmd *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTerminalMockRecorder) Wait(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTerminal)(nil).Wait), cmd)
}
